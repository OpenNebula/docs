===========
Basic Usage
===========

The support tool comes with 2 specialized tools to

- :ref:`generate support diagnostic bundle <supp_bundle>`,
- :ref:`scan vCenter permissions <supp_perms>`.

.. _supp_bundle:

Generate Support Bundle
=======================

When there are no special requirements, the support diagnostic bundle can be generated just by running ``onesupport`` **on the front-end** without any extra parameters. The command must be running under privileged user (directly by root or via sudo). For example:

.. prompt:: bash $ auto

    $ sudo onesupport

The command generates a diagnostic bundle file and puts it into ``/tmp/``. The precise file location is shown at the end of the terminal output, e.g.:

.. prompt:: bash # auto

    Diagnostic archive: /tmp/onesupport.HNpsTCQSb.tar.xz

Please **attach this file to the support ticket**.

.. important::

   For most support issues it's enough to provide just a limited support bundle with front-end only specific information and without database dumps. The limited bundle can be generated by running:

    .. prompt:: bash $ auto

        $ sudo onesupport frontend nodb

The tool prints all actions, based on which you can decide if you want to provide such a bundle to the support team. Example full output:

.. code-block:: bash

    $ sudo onesupport
        ___  _ __   ___
       / _ \| '_ \ / _ \
      | (_) | | | |  __/     OpenNebula Support Tool
       \___/|_| |_|\___|

     ------------------------------------------------------
     Group: all
     - with conf: true
     - with logs: true
     - with DB:   true

    Get OS distribution
    Get current user
    Get user "oneadmin"
    Get installed packages
    Get kernel version
    Get security settings
    Get memory/swap
    Get Ruby version and Gems
    Get CPU information
    Get system services
    Get process list
    Get kernel runtime parameters (sysctl)
    Get mounts
    Detect web server
    Get OpenNebula version
    Get OpenNebula running processes
    Detect changes in OpenNebula packages
    Get OpenNebula database information
    Get OpenNebula hosts
    Get OpenNebula logs
    Get system logs
    Dump OpenNebula database
    Get OpenNebula configuration
    Get OpenNebula remotes
    Dump OpenNebula objects
      - hosts
      - vnets
      - datastores
      - clusters
      - images
      - templates
      - ACLs
      - VDCs
      - OneFlow templates
    Dump OpenNebula instance objects
      - VMs
      - OneFlow instances
    Get web server configuration
    Inspecting the OpenNebula hosts
      - KVM host localhost (oneadmin with oneadmin's key)
    [localhost] Get OS distribution
    [localhost] Get current user
    [localhost] Get user "oneadmin"
    [localhost] Get installed packages
    [localhost] Get kernel version
    [localhost] Get security settings
    [localhost] Get memory/swap
    [localhost] Get Ruby version and Gems
    [localhost] Get CPU information
    [localhost] Get system services
    [localhost] Get process list
    [localhost] Get kernel runtime parameters (sysctl)
    [localhost] Get mounts
    [localhost] Get IP/bridge runtime config.
    [localhost] Get firewall config
    [localhost] Get Open vSwitch runtime config.
    [localhost] Detect libvirt
    [localhost] Get libvirt domains list
    [localhost] Get libvirt domains XML and screenshots
    [localhost] Get libvirt configuration
    [localhost] Get system logs

    Diagnostic archive: /tmp/onesupport.HNpsTCQSb.tar.xz

Follow the :ref:`advanced usage <supp_bundle_advanced>` guide to learn how to limit the information provided within the support bundle or how to use it on different hosts then frontend.

.. _supp_perms:

Scan vCenter Permissions
========================

When you are using OpenNebula cloud to manage vCenter infrastructure, it might be necessary to know also details about the permissions configuration inside vCenter. This is **automatically got during the support bundle preparation**, but can be scanned separately at any time (e.g., in case the automatic run fails).

Dedicated tool ``onesupport_vcenter_privs`` is used to gather permissions configuration.

.. important::

    The tool connects directly to your vCenter instance and must be provided with connection parameters.

Syntax:

.. prompt:: bash $ auto

    $ onesupport_vcenter_privs
    Usage: onesupport_vcenter_privs [arguments]

    Mandatory arguments:
      --host=name       .... vCenter hostname
      --user=name       .... vCenter login user name
      --password=text   .... vCenter password
      --check-user=name .... vCenter user for OpenNebula to check

Example run:

.. prompt:: bash $ auto

    $ onesupport_vcenter_privs --host=vcenter.localdomain \
        --user=administrator@vsphere.local --password=TopSecretPassword \
        --check-user=oneadmin@vsphere.local

The result is printed on the terminal (standard output). Can be redirected to the file, or just copy&pasted into the support ticket.
