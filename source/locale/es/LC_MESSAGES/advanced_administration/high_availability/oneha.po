# 
msgid ""
msgstr ""
"Project-Id-Version: OpenNebula 4.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-30 12:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/advanced_administration/high_availability/oneha.rst:5
msgid "OpenNebula High Availability"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:7
msgid ""
"This guide walks you through the process of setting a high available cluster"
" for OpenNebula. The ultimate goal is to reduce downtime of core OpenNebula "
"services: core (oned), scheduler (mm\\_sched) and Sunstone interface "
"(sunstone-server)."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:9
msgid ""
"We will be using the classical active-passive cluster architecture which is "
"the recommended solution for OpenNebula. In this solution two (or more) "
"nodes will be part of a cluster where the OpenNebula daemon, scheduler and "
"Sunstone (web UI) are cluster resources. When the active node fails, the "
"passive one takes control."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:11
msgid ""
"If you are interested in failover protection against hardware and operating "
"system outages within your virtualized IT environment, check the "
":ref:`Virtual Machines High Availability Guide <ftguide>`."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:13
msgid ""
"This guide is structured in a *how-to* form using the Red Hat HA Cluster "
"suite tested in a CentOS installation; but generic considerations and "
"requirements for this setup are discussed to easily implement this solution "
"with other systems."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:16
msgid "Overview"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:18
msgid ""
"In terms of high-availability, OpenNebula consists in three different basic "
"services, namely:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:20
msgid ""
"**OpenNebula Core**: It is the main orchestration component, supervises the "
"life-cycle of each resources (e.g. hosts, VMs or networks) and operates on "
"the physical infrastructure to deploy and manage virtualized resources."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:22
msgid ""
"**Scheduler**: The scheduler performs a matching between the virtual "
"requests and the available resources using different scheduling policies. It"
" basically assigns a physical host, and a storage area to each VM."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:24
msgid ""
"**Sunstone**: The GUI for advanced and cloud users as well as system "
"administrators. The GUI is accessed through a well-known end-point (IP/URL)."
" Sunstone has been architected as a scalable web application supporting "
"multiple application servers or processes."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:26
msgid ""
"The state of the system is stored in a database for persistency and managed "
"by OpenNebula core. In order to improve the response time of the core "
"daemon, it caches the most recently used data so it reduces the number of "
"queries to the DB. Note that this prevents an active-active HA configuration"
" for OpenNebula. However such a configuration, given the lightweight and "
"negligible start times of the core services, does not suppose any advantage."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:28
msgid ""
"In this guide we assume that the DB backing OpenNebula core state is also "
"configured in a HA mode. The procedure for MySQL is well documented "
"elsewhere. Although Sqlite could also be used it is not recommended for a HA"
" deployment."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:30
msgid "|image0|"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:33
msgid "HA Cluster Components & Services"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:35
msgid ""
"As shown in the previous figure, we will use just one fail-over domain "
"(blue) with two hosts. All OpenNebula services will be collocated and run on"
" the same server in this case. You can however easily modify this "
"configuration to split them and allocate each service to a different host "
"and define different fail-over domains for each one (e.g. blue for oned and "
"scheduler, red for sunstone)."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:37
msgid ""
"The following components will be installed and configured based on the "
"RedHat Cluster suite:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:39
msgid ""
"\\* **Cluster management**, CMAN (cluster manager) and corosync. These "
"components manage cluster membership and quorum. It prevents service "
"corruption in a distributed setting because of a *split-brain* condition "
"(e.g. two opennebulas updating the DB)."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:41
msgid ""
"\\* **Cluster configuration system**, CCS. It keeps and synchronizes the "
"cluster configuration information. There are other windows-based "
"configuration systems."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:43
msgid ""
"\\* **Service Management**, rgmanager. This module checks service status and"
" start/stop them as needed in case of failure."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:45
msgid ""
"\\* **Fencing**, in order to prevent OpenNebula DB corruption it is "
"important to configure a suitable fencing mechanism."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:48
msgid "Installation and Configuration"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:50
msgid "In the following, we assume that the cluster consists on two servers:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:52
msgid "one-server1"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:53
msgid "one-server2"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:55
msgid ""
"While setting and testing the installation it is recommended to disable any "
"firewall. Also watch out for se\\_linux."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:58
msgid "Step 1: OpenNebula"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:60
msgid ""
"You should have two servers (they may be VMs, as discussed below) ready to "
"install OpenNebula. These servers will have the same requirements as regular"
" OpenNebula front-end (e.g. network connection to hosts, ssh passwordless "
"access, shared filesystems if required...). Remember to use a HA MySQL "
"backend."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:62
msgid ""
"It is important to use a twin installation (i.e. same configuration files) "
"so probably it is better to start and configure a server, and once it is "
"tested rsync the configuration to the other one."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:65
msgid "Step 2: Install Cluster Software"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:67
msgid "In all the cluster servers install the cluster components:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:74
msgid "Set the same password for user ricci in all the servers"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:81
msgid "Finally enable the daemons and start ricci."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:91
msgid "Step 3: Create the Cluster and Failover Domain"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:93
msgid ""
"Cluster configuration is stored in ``/etc/cluster/cluster.conf`` file. You "
"can either edit this file directly or use the ccs tool. It is important, "
"however to synchronize and activate the configurtion on all nodes after a "
"change."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:95
msgid "To define the cluster using ccs:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:105
msgid ""
"You can use the -p option in the previous commands with the password set for"
" user ricci."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:107
msgid ""
"Now you should have a cluster with two nodes, note the specific quorum "
"options for cman, running. Let's create one failover domain for OpenNebula "
"services consisting of both servers:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:117
msgid "Step 4: Define the OpenNebula Service"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:119
msgid ""
"As pointed out previously we'll use just one fail-over domain with all the "
"OpenNebula services co-allocated in the same server. You can easily split "
"the services in different servers and failover domains if needed (e.g. for "
"security reasons you want Sunstone in other server)."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:121
msgid ""
"First create the resources of the service: A IP address to reach Sunstone, "
"the one init.d script (it starts oned and scheduler) and the sunstone init.d"
" script"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:129
msgid "Finally compose the service with these resources and start it:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:139
msgid "As a reference the /etc/cluster/cluster.conf should look like:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:173
msgid "Fencing and Virtual Clusters"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:175
msgid ""
"Fencing is an essential component when setting up a HA cluster. You should "
"install and test a proper fencing device before moving to production. In "
"this section we show how to setup a special fencing device for virtual "
"machines."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:177
msgid ""
"OpenNebula can be (and it is usually) installed in a virtual machine. "
"Therefore the previous one-server1 and one-server2 can be in fact virtual "
"machines running in the same physical host (you can run them in different "
"hosts, requiring a different fencing plugin)."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:179
msgid ""
"In this case, a virtual HA cluster running in the same host, you could "
"control misbehaving VMs and restart OpenNebula in other virtual server. "
"However, if you need a to control also host failures you need to fencing "
"mechanism for the physical host (typically based on power)."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:181
msgid ""
"Let's assume then that one-server1 and one-server2 are VMs using KVM and "
"libvirt, and running on a physical server."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:184
msgid "Step 1: Configuration of the Physical Server"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:186
msgid "Install the fence agents:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:192
msgid ""
"Now we need to generate a random key, for the virtual servers to communicate"
" with the dencing agent in the physical server. You can use any convinient "
"method, for example: generate key ro access xvm"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:200
msgid "Finally configure the fence-virtd agent"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:206
msgid "The configuration file should be similar to:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:237
msgid ""
"Interface (eth0 in the example) is the interface used to communicate the "
"virtual and physical servers."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:239
msgid "Now you can start and test the fencing agent:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:248
msgid "Step 2: Configuration of the Virtual Servers"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:250
msgid "You need to copy the key to each virtual server:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:257
msgid "Now you should be able to test the fencing agent in the virtual nodes:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:264
msgid "Step 3: Configure the Cluster to Use Fencing"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:266
msgid "Finally we need to add the fencing device to the cluster:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:272
msgid "And let the servers use it:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:281
msgid "Finally synchronize and activate the configuration:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:288
msgid "What to Do After a Fail-over Event"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:290
msgid ""
"When the active node fails and the passive one takes control, it will start "
"OpenNebula again. This OpenNebula will see the resources in the exact same "
"way as the one in the server that crashed. However, there will be a set of "
"Virtual Machines which will be stuck in transient states. For example when a"
" Virtual Machine is deployed and it starts copying the disks to the target "
"hosts it enters one of this transient states (in this case 'PROLOG'). "
"OpenNebula will wait for the storage driver to return the 'PROLOG' exit "
"status. This will never happen since the driver fails during the crash, "
"therefore the Virtual Machine will get stuck in the state."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:292
msgid ""
"In these cases it's important to review the states of all the Virtual "
"Machines and let OpenNebula know if the driver exited successfully or not. "
"There is a command specific for this: ``onevm recover``. You can read more "
"about this command in the :ref:`Managing Virtual Machines <vm_guide_2>` "
"guide."
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:294
msgid ""
"In our example we would need to manually check if the disk files have been "
"properly deployed to our host and execute:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:300
msgid "The transient states to watch out for are:"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:302
msgid "BOOT"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:303
msgid "CLEAN"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:304
msgid "EPILOG"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:305
msgid "FAIL"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:306
msgid "HOTPLUG"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:307
msgid "MIGRARTE"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:308
msgid "PROLOG"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:309
msgid "SAVE"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:310
msgid "SHUTDOWN"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:311
msgid "SNAPSHOT"
msgstr ""

#: ../../source/advanced_administration/high_availability/oneha.rst:312
msgid "UNKNOWN"
msgstr ""
