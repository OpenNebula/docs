-------

.. _image_update:

Image update
================================================================================

Once is OpenNebula image downloaded and in the local filesystem it will not automatically check for a new version or update itself - but this can be done manually by simple ``docker pull``:

.. prompt:: bash $ auto

    $ docker pull https://docker.opennebula.io/opennebula:6.1 # TODO

After this command the local version of the image with the same name and tag will be updated.

The next step is to stop/delete the already running container using the same image (but with different digest) and creating a new container with the exactly same command. This time it will use the newer image.

.. note::

    The precondition here is that the used image name is always the one and the same in all the commands.

.. important::

    Thanks to the **onedb** upgrade feature the database should be automatically migrated to the new OpenNebula version. So no extra work is required.

docker-compose
--------------

If the docker-compose is used then the following sequence should be enough to update all images and start them again:

.. prompt:: bash $ auto

    $ docker-compose down && docker-compose pull && docker-compose up -d


TODO
================================================================================

.. todo::

    The functionality of the OpenNebula container is controlled via :ref:`image parameters <reference_params>`. Their complete list is embedded in the image itself and can be extracted with a simple shell one-liner (in this case the image is named ``opennebula:6.1``):

    .. prompt:: bash # auto

        # docker image inspect -f '{{ index .Config.Labels "org.label-schema.docker.params"}}' opennebula:6.1 | sed 's/, /\n/g'

+------------------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| File                   | Customizable | Description                                                                                                                                |
+========================+==============+============================================================================================================================================+
| ``docker-compose.yml`` | NO           | Main deployment file for the docker-compose - it is provided by OpenNebula.                                                                |
+------------------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| ``default.env``        | NO           | Contains all default values of :ref:`image parameters <reference_params>` - it is provided by OpenNebula.                                  |
+------------------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| ``custom.env``         | YES          | This file is intended for the user to edit and it will override the ``default.env``.                                                       |
+------------------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| ``.env``               | YES          | Similarly as with the ``custom.env`` but this file is for the customization of :ref:`the deploy parameters <reference_deploy_params>`.     |
+------------------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------+

.. important::

    Because some image parameters and deploy parameters must have equal values for the deployment to work properly - the OpenNebula's ``docker-compose.yml`` will ensure that if you change some deploy parameters then they will also set some image parameters:

    * ``DEPLOY_SUNSTONE_EXTERNAL_PORT`` -> ``SUNSTONE_PORT``
    * ``DEPLOY_SUNSTONE_EXTERNAL_TLS_PORT`` -> ``SUNSTONE_TLS_PORT``
    * ``DEPLOY_SUNSTONE_EXTERNAL_VNC_PORT`` -> ``SUNSTONE_VNC_PORT``
    * ``DEPLOY_ONEGATE_EXTERNAL_PORT`` -> ``ONEGATE_PORT``
    * ``DEPLOY_MONITORD_EXTERNAL_PORT`` -> ``MONITORD_PORT``

    So that means that you don't need to duplicate the value in the both ``.env`` and ``custom.env`` - just setup the ``.env`` with the deploy keys and all the depending image parameters will be automatically fixed (full disclosure: modifying the ``custom.env`` with these port variables would be ineffective - no change).

    The definitive rules are described in :ref:`the deploy parameters section <reference_deploy_params>`.

    This is one of the big differences with :ref:`the single container deployment <deploy_single_container>` where you have to take care of this nuisance manually.

.. important::

    The hypevisor nodes must be able to connect to the host address defined in ``OPENNEBULA_FRONTEND_SSH_HOST`` and the published SSH port of the ``sshd`` service.

    Using the IP address should be the most problem-free approach but if a dns name is used and there is a misconfigured DNS in your network then you could workaround this by fixing the ``/etc/hosts`` file on each hypervisor node.

    If the OneGate/OneFlow functionality is desired then the node must also be able to connect to the ``OPENNEBULA_FRONTEND_HOST`` on the ``ONEGATE_PORT``.








.. note::

    ``SUNSTONE_PORT`` and ``SUNSTONE_TLS_PORT`` must be aligned with the Sunstone's published ports (8080, 4443). This applies to ``ONEGATE_PORT`` (15030) too.

    Similar situation is also with the ``SUNSTONE_VNC_PORT`` (30001) and ``MONITORD_PORT`` (14124) - but pay attention to the both sides of publish port argument (both sides must be set).

